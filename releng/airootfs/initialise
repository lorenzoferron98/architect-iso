# !/bin/sh
#
# Architect Network Configuration script (version 1.4.1 - 28-02-2019)
#
# Written by Carl Duff
#
# This script will detect and configure network connections before
# downloading and executing the latest versions of the installer from github.
#
# This program is free software, provided under the GNU General Public License
# as published by the Free Software Foundation. So feel free to copy, distribute,
# or modify it as you wish.
#

# Variables
VERSION="Architect Network Configuration 1.4.1"
OPT="/tmp/.opt"
echo "" >${OPT}
WIFI_DEV=$(ip link | awk '{print $2}' | grep -i "wl" | sed 's/://')
_PlsWait="\nPlease wait... Even geduld aub... Bitte warten... Attendere prego... Vennligst Vent... Por favor espera...\n"

# Check there is an active ethernet connection. Wait a bit for dhcpcd.
please_wait() {

dialog --backtitle "$VERSION" --title " Searching for Network Connection " --infobox "$_PlsWait" 0 0
sleep 8

}

# Run if the ethernet connection is not already enabled
ether_connect() {

if [[ $(systemctl status dhcpcd | grep "running") == "" ]]; then
   systemctl enable dhcpcd
   systemctl start dhcpcd
fi

dialog --backtitle "$VERSION" --title " Connecting to Ethernet " --infobox "$_PlsWait" 0 0
sleep 5
}

# If no ethernet and there is a wireless device recognised
wifi_connect() {

# Stop dhcpcd if it is running
if [[ $(systemctl status dhcpcd | grep "running") != "" ]]; then
   systemctl disable dhcpcd
   systemctl stop dhcpcd
fi

# Set the link down else wifi-menu won't work
ip link set $WIFI_DEV down >/dev/null 2>&1	
			
# Start wifi-menu
clear
wifi-menu
dialog --backtitle "$VERSION" --title " Connecting Wifi " --infobox "$_PlsWait" 0 0 && sleep 2

}

# Stable or Development Options available
download_aif() {

  # Provided there is a connection, then this menu will be available.
  dialog --backtitle "$VERSION" --title " Installer Version " \
  --menu $"\nPlease choose / Gelieve te kiezen / Bitte w채hlen / Scegli / Vennligst velg / Por favor elija\n\n1. Stable / stabiel / stabil / stabile / stabilny / estable\n\n2. Development / ontwikkeling / Entwicklung / sviluppo / utvikling / rozw처j / desarrollo\n" 20 50 2 \
  "1" $"Stable" \
  "2" $"Development" 2>${OPT} 
  
  DOWNLOAD=""
  FOLDER=""
  case $(cat ${OPT}) in
       "1") # Stable (Net)
            DOWNLOAD=https://github.com/llde/aif/archive/master.zip
            FOLDER=/aif-master/aif
            ;;
       "2") # Development Version
            DOWNLOAD=https://github.com/lorenzoferron98/aif-dev/archive/master.zip
            FOLDER=/aif-dev-master/aif
            ;;
         *) break;
            ;;
  esac

  clear
  if wget -N ${DOWNLOAD}; then
    unzip -o master.zip -d /
    ${FOLDER}
  else
    dialog --backtitle "$VERSION" --title "ERROR DOWNLOADING INSTALLER." --menu "Maybe the net requires login." 20 50 1 "1" "Try login with Lynx" 2>${OPT}
    
    case $(cat ${OPT}) in
        "1") 
            clear
            lynx www.google.it
            ;;
        "*") break;
           ;;
    esac
    
    wget -N $DOWNLOAD
    unzip -o master.zip -d /
    $FOLDER
  fi
}

# When complete (Whether successfully or unsuccessfully)
inst_complete() {

    dialog --backtitle "$VERSION" --title " Installation Complete " \
  --menu $"\nPlease choose / Gelieve te kiezen / Bitte w채hlen / Scegli / Vennligst velg / Por favor elija\n" 0 0 3 \
  "1" $"Reboot" \
  "2" $"Shutdown" \
  "3" $"Virtual Console" 2>${OPT}
  
   case $(cat ${OPT}) in
       "1") reboot
            ;;
       "2") shutdown -h 0
            ;;
         *) clear
         
            if [[ ! $(ping -c 1 google.com) ]]; then
				echo -e "\nThe Architect Installation Framework requires an active internet connection. It can then be re-started with the following command: /initialise\n"
            else 
				echo -e "\nThe Architect Installation Framework can be re-started with the following command: /initialise\n"
	        fi
	        
	        exit 0
            ;;
   esac
}

# Main body

    systemctl start dhcpcd 
    please_wait
    
    # If no ethernet connection detected, then offer these options
	while [[ ! $(ping -c 1 google.com) ]]; do
		
		dialog --backtitle "$VERSION" --title " Network Error " \
		--menu $"\nPlease choose / Gelieve te kiezen / Bitte w채hlen / Scegli / Vennligst velg / Por favor elija\n" 0 0 3 \
		"1" $"Ethernet" \
		"2" $"Wifi" \
		"3" $"Exit" 2>${OPT}
	
		case $(cat ${OPT}) in
		"1") ether_connect 
            ;;
		"2") if [[ $WIFI_DEV != "" ]]; then
				wifi_connect
		     else
		        dialog --backtitle "$VERSION" --title " Network Error " --msgbox "\nNo Wifi Device Found!\n\n" 0 0
		     fi
            ;;
         *) break
			exit 1
            ;;
		esac
	done
	
	[[ $(ping -c 1 google.com) ]] && download_aif
	
	# Whether successful or not, offer to reboot, shutdown, or exit to vc
	inst_complete
